Our project is Online medicine donation Project where 4 logins and signup are there ngo, hospital,user,admin where User has the functionlity of donation of medicines,request raised for medicine,status that is fullfilled resolve or reject ,hospital and ngo will raise the request for medicine and both having status that is fullfilled resolve or reject then come to admin after login admindashboard come where it shows the medicine data where the number of medicines are present,admin will see all the request and approve the request or resolve or in pending then it will check all the activity done by users,hospitals and ngos, and in admindashboard number of registered hospitals,users/donars,ngos should be shown and it can serach number of medicines and after find select it then give restired of user,ngo,hostipal


DataBase__ 

USE [Med_Donation];
GO

-- Drop tables in dependency order
DROP TABLE IF EXISTS donations;
DROP TABLE IF EXISTS requests;
DROP TABLE IF EXISTS medicines;
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS admins;
DROP TABLE IF EXISTS hospitals;
DROP TABLE IF EXISTS ngos;
GO

-- USERS table
CREATE TABLE users (
    UserId INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100),
    Phone NVARCHAR(20),
    Address NVARCHAR(255),
    Email NVARCHAR(255),
    Password NVARCHAR(255)
);
GO

INSERT INTO users (Name, Phone, Address, Email, Password) VALUES
('Prem Ragade', '8080759281', 'Pune', 'prem@example.com', 'pass123'),
('Ravi Kumar', '9876543210', 'Delhi', 'ravi@example.com', 'ravi321'),
('Anjali Sharma', '9871234560', 'Mumbai', 'anjali@example.com', 'anjali@123'),
('Suresh Mehta', '9001234567', 'Ahmedabad', 'suresh@example.com', 'suresh123'),
('Divya Nair', '9123456780', 'Kochi', 'divya@example.com', 'divya321');
GO

-- ADMINS table
CREATE TABLE admins (
    AdminId INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100),
    Role NVARCHAR(50),
    Email NVARCHAR(255),
    Password NVARCHAR(255)
);
GO

INSERT INTO admins (Name, Role, Email, Password) VALUES
('Admin1', 'SuperAdmin', 'admin1@meddonation.com', 'admin123'),
('Admin2', 'Moderator', 'admin2@meddonation.com', 'mod123'),
('Admin3', 'Viewer', 'admin3@meddonation.com', 'view123'),
('Admin4', 'Manager', 'admin4@meddonation.com', 'mgr123'),
('Admin5', 'Coordinator', 'admin5@meddonation.com', 'coord123');
GO

-- HOSPITALS table
CREATE TABLE hospitals (
    HospitalId INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100),
    Address NVARCHAR(255),
    Phone NVARCHAR(20),
    Email NVARCHAR(255),
    Password NVARCHAR(255)
);
GO

INSERT INTO hospitals (Name, Address, Phone, Email, Password) VALUES
('City Care Hospital', 'Mumbai', '9874561230', 'citycare@hospital.com', 'city123'),
('Apex Hospital', 'Chennai', '9123450987', 'apex@hospital.com', 'apex456'),
('Sunrise Clinic', 'Delhi', '8765432109', 'sunrise@clinic.com', 'sun123'),
('Hope Hospital', 'Bangalore', '9345678901', 'hope@hospital.com', 'hope321'),
('Global Hospital', 'Hyderabad', '9008765432', 'global@hospital.com', 'global789');
GO

-- NGOS table
CREATE TABLE ngos (
    NgoId INT PRIMARY KEY IDENTITY(1,1),
    OrganizationName NVARCHAR(100),
    ContactPerson NVARCHAR(100),
    Phone NVARCHAR(20),
    Address NVARCHAR(255),
    Email NVARCHAR(255),
    Password NVARCHAR(255)
);
GO

INSERT INTO ngos (OrganizationName, ContactPerson, Phone, Address, Email, Password) VALUES
('Health for All', 'Ritika Sen', '9988776655', 'Kolkata', 'hfa@ngo.org', 'hfa123'),
('Care India', 'Manoj Das', '9876543212', 'Ranchi', 'care@ngo.org', 'care321'),
('Life Savers', 'Priya Mehta', '8765432198', 'Indore', 'lifesavers@ngo.org', 'save123'),
('MediTrust', 'Amit Kumar', '7654321987', 'Nagpur', 'meditrust@ngo.org', 'trust123'),
('CureReach', 'Nisha Singh', '9873214560', 'Patna', 'curereach@ngo.org', 'cure456');
GO

-- MEDICINES table
CREATE TABLE medicines (
    MedicineID INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100),
    Description NVARCHAR(255),
    ExpiryDate DATE,
    Quantity INT,
    DonorID INT FOREIGN KEY REFERENCES users(UserId),
    Status NVARCHAR(50),
    CreatedAt DATETIME DEFAULT GETDATE()
);
GO

INSERT INTO medicines (Name, Description, ExpiryDate, Quantity, DonorID, Status, CreatedAt) VALUES
('Paracetamol', 'Used for fever and pain relief', '2026-01-01', 10, 1, 'Available', GETDATE()),
('Amoxicillin', 'Antibiotic for infections', '2025-12-12', 20, 2, 'Available', GETDATE()),
('Azithromycin', 'Used for chest infections', '2025-11-10', 15, 3, 'Pending', GETDATE()),
('Ibuprofen', 'Pain killer and anti-inflammatory', '2026-06-01', 25, 4, 'Available', GETDATE()),
('Metformin', 'Used to treat diabetes', '2027-01-01', 30, 5, 'Approved', GETDATE());
GO

-- DONATIONS table
CREATE TABLE donations (
    DonationID INT PRIMARY KEY IDENTITY(1,1),
    MedicineID INT FOREIGN KEY REFERENCES medicines(MedicineID),
    DonatedToNgoId INT FOREIGN KEY REFERENCES ngos(NgoId),
    DonatedAt DATETIME DEFAULT GETDATE(),
    Status NVARCHAR(50)
);
GO

INSERT INTO donations (MedicineID, DonatedToNgoId, DonatedAt, Status) VALUES
(1, 1, GETDATE(), 'Completed'),
(2, 2, GETDATE(), 'Pending'),
(3, 3, GETDATE(), 'Approved'),
(4, 4, GETDATE(), 'Rejected'),
(5, 5, GETDATE(), 'Completed');
GO

-- REQUESTS table (Updated to allow either Hospital or NGO)
CREATE TABLE requests (
    RequestID INT PRIMARY KEY IDENTITY(1,1),
    RequestedByHospitalId INT NULL,
    RequestedByNgoId INT NULL,
    MedicineName NVARCHAR(100),
    Quantity INT,
    RequestDate DATETIME DEFAULT GETDATE(),
    Status NVARCHAR(50),

    CONSTRAINT FK_Requests_Hospital FOREIGN KEY (RequestedByHospitalId) REFERENCES hospitals(HospitalId),
    CONSTRAINT FK_Requests_Ngo FOREIGN KEY (RequestedByNgoId) REFERENCES ngos(NgoId),

    -- Only one of the two (Hospital or NGO) can make a request
    CONSTRAINT CK_RequesterType CHECK (
        (RequestedByHospitalId IS NOT NULL AND RequestedByNgoId IS NULL) OR 
        (RequestedByHospitalId IS NULL AND RequestedByNgoId IS NOT NULL)
    )
);
GO

INSERT INTO requests (RequestedByHospitalId, RequestedByNgoId, MedicineName, Quantity, Status)
VALUES
(1, NULL, 'Paracetamol', 10, 'Pending'),
(2, NULL, 'Ibuprofen', 5, 'Approved'),
(NULL, 1, 'Amoxicillin', 8, 'Rejected'),
(NULL, 2, 'Metformin', 12, 'Completed'),
(3, NULL, 'Azithromycin', 7, 'Pending');
GO


--------------------------controllers----------------
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using OnlineMedDonation.DTOs;
using OnlineMedDonation.Models;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace OnlineMedDonation.Controllers
{
    [Route("api/admin")]
    [ApiController]
    public class AdminAuthController : ControllerBase
    {
        private readonly MedDonationContext _context;
        private readonly IConfiguration _config;

        public AdminAuthController(MedDonationContext context, IConfiguration config)
        {
            _context = context;
            _config = config;
        }

        [HttpPost("signup")]
        public async Task<IActionResult> Signup(Admin admin)
        {
            if (await _context.Admins.AnyAsync(a => a.Email == admin.Email))
                return BadRequest("Admin with this email already exists.");

            admin.Role = "admin";
            _context.Admins.Add(admin);
            await _context.SaveChangesAsync();
            return Ok(new { message = "Admin registered successfully" });
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login(LoginDto dto)
        {
            var admin = await _context.Admins.FirstOrDefaultAsync(a => a.Email == dto.Email && a.Password == dto.Password);
            if (admin == null)
                return Unauthorized("Invalid email or password.");

            var token = GenerateJwtToken(admin.Email, "admin");
            return Ok(new { token });
        }

        private string GenerateJwtToken(string email, string role)
        {
            var claims = new[]
            {
                new Claim(ClaimTypes.Email, email),
                new Claim(ClaimTypes.Role, role)
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_config["Jwt:Key"]));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _config["Jwt:Issuer"],
                audience: _config["Jwt:Audience"],
                claims: claims,
                expires: DateTime.Now.AddHours(6),
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineMedDonation.Models;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AdminsController : ControllerBase
    {
        private readonly MedDonationContext _context;

        public AdminsController(MedDonationContext context)
        {
            _context = context;
        }

        // GET: api/Admins
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Admin>>> GetAdmins()
        {
            return await _context.Admins.ToListAsync();
        }

        // GET: api/Admins/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Admin>> GetAdmin(int id)
        {
            var admin = await _context.Admins.FindAsync(id);

            if (admin == null)
            {
                return NotFound();
            }

            return admin;
        }

        // PUT: api/Admins/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutAdmin(int id, Admin admin)
        {
            if (id != admin.AdminId)
            {
                return BadRequest();
            }

            _context.Entry(admin).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!AdminExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Admins
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Admin>> PostAdmin(Admin admin)
        {
            _context.Admins.Add(admin);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetAdmin", new { id = admin.AdminId }, admin);
        }

        // DELETE: api/Admins/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteAdmin(int id)
        {
            var admin = await _context.Admins.FindAsync(id);
            if (admin == null)
            {
                return NotFound();
            }

            _context.Admins.Remove(admin);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool AdminExists(int id)
        {
            return _context.Admins.Any(e => e.AdminId == id);
        }
    }
}


using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using OnlineMedDonation.DTOs;
using OnlineMedDonation.Models;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly MedDonationContext _context;
        private readonly IConfiguration _configuration;

        public AuthController(MedDonationContext context, IConfiguration configuration)
        {
            _context = context;
            _configuration = configuration;
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login(LoginDto dto)
        {
            object account = null;

            var user = await _context.Users.FirstOrDefaultAsync(u => u.Email == dto.Email && u.Password == dto.Password);
            if (user != null)
                account = user;

            if (account == null)
            {
                var admin = await _context.Admins.FirstOrDefaultAsync(a => a.Email == dto.Email && a.Password == dto.Password);
                if (admin != null)
                    account = admin;
            }

            if (account == null)
            {
                var hospital = await _context.Hospitals.FirstOrDefaultAsync(h => h.Email == dto.Email && h.Password == dto.Password);
                if (hospital != null)
                    account = hospital;
            }

            if (account == null)
            {
                var ngo = await _context.Ngos.FirstOrDefaultAsync(n => n.Email == dto.Email && n.Password == dto.Password);
                if (ngo != null)
                    account = ngo;
            }

            if (account == null)
                return Unauthorized("Invalid credentials");

            string role;

            if (account is User)
                role = "User";
            else if (account is Admin)
                role = "Admin";
            else if (account is Hospital)
                role = "Hospital";
            else if (account is Ngo)
                role = "Ngo";
            else
                return Unauthorized("Invalid role.");



            string token = GenerateJwtToken(dto.Email, role);
            return Ok(new { token });
        }



        [HttpPost("register")]
        public async Task<IActionResult> Register(RegisterDto dto)
        {
            switch (dto.Role.ToLower())
            {
                case "user":
                    var user = new User
                    {
                        Name = dto.Name,
                        Email = dto.Email,
                        Password = dto.Password,
                        Phone = dto.Phone,
                        Address = dto.Address
                    };
                    _context.Users.Add(user);
                    break;

                case "admin":
                    var admin = new Admin
                    {
                        Name = dto.Name,
                        Email = dto.Email,
                        Password = dto.Password,
                        Role = "Admin"
                    };
                    _context.Admins.Add(admin);
                    break;

                case "hospital":
                    var hospital = new Hospital
                    {
                        Name = dto.Name,
                        Email = dto.Email,
                        Password = dto.Password,
                        Phone = dto.Phone,
                        Address = dto.Address
                    };

                    _context.Hospitals.Add(hospital);
                    break;

                case "ngo":
                    var ngo = new Ngo
                    {
                        OrganizationName = dto.OrganizationName,
                        ContactPerson = dto.ContactPerson,
                        Email = dto.Email,
                        Password = dto.Password,
                        Phone = dto.Phone,
                        Address = dto.Address
                    };
                    _context.Ngos.Add(ngo);
                    break;

                default:
                    return BadRequest("Invalid role.");
            }

            await _context.SaveChangesAsync();
            return Ok("Registration successful");
        }


        private string GenerateJwtToken(string email, string role)
        {
            var claims = new[]
            {
                new Claim(ClaimTypes.Email, email),
                new Claim(ClaimTypes.Role, role)
            };

            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims: claims,
                expires: DateTime.Now.AddHours(6),
                signingCredentials: creds
            );

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }


   
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineMedDonation.Models;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class DonationsController : ControllerBase
    {
        private readonly MedDonationContext _context;

        public DonationsController(MedDonationContext context)
        {
            _context = context;
        }

        // GET: api/Donations
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Donation>>> GetDonations()
        {
            return await _context.Donations.ToListAsync();
        }

        // GET: api/Donations/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Donation>> GetDonation(int id)
        {
            var donation = await _context.Donations.FindAsync(id);

            if (donation == null)
            {
                return NotFound();
            }

            return donation;
        }

        // PUT: api/Donations/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutDonation(int id, Donation donation)
        {
            if (id != donation.DonationId)
            {
                return BadRequest();
            }

            _context.Entry(donation).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!DonationExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Donations
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Donation>> PostDonation(Donation donation)
        {
            _context.Donations.Add(donation);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetDonation", new { id = donation.DonationId }, donation);
        }

        // DELETE: api/Donations/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteDonation(int id)
        {
            var donation = await _context.Donations.FindAsync(id);
            if (donation == null)
            {
                return NotFound();
            }

            _context.Donations.Remove(donation);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool DonationExists(int id)
        {
            return _context.Donations.Any(e => e.DonationId == id);
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineMedDonation.Models;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class HospitalsController : ControllerBase
    {
        private readonly MedDonationContext _context;

        public HospitalsController(MedDonationContext context)
        {
            _context = context;
        }

        // GET: api/Hospitals
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Hospital>>> GetHospitals()
        {
            return await _context.Hospitals.ToListAsync();
        }

        // GET: api/Hospitals/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Hospital>> GetHospital(int id)
        {
            var hospital = await _context.Hospitals.FindAsync(id);

            if (hospital == null)
            {
                return NotFound();
            }

            return hospital;
        }

        // PUT: api/Hospitals/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutHospital(int id, Hospital hospital)
        {
            if (id != hospital.HospitalId)
            {
                return BadRequest();
            }

            _context.Entry(hospital).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!HospitalExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Hospitals
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Hospital>> PostHospital(Hospital hospital)
        {
            _context.Hospitals.Add(hospital);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetHospital", new { id = hospital.HospitalId }, hospital);
        }

        // DELETE: api/Hospitals/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteHospital(int id)
        {
            var hospital = await _context.Hospitals.FindAsync(id);
            if (hospital == null)
            {
                return NotFound();
            }

            _context.Hospitals.Remove(hospital);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool HospitalExists(int id)
        {
            return _context.Hospitals.Any(e => e.HospitalId == id);
        }
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineMedDonation.Models;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MedicinesController : ControllerBase
    {
        private readonly MedDonationContext _context;

        public MedicinesController(MedDonationContext context)
        {
            _context = context;
        }

        // GET: api/Medicines
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Medicine>>> GetMedicines()
        {
            return await _context.Medicines.ToListAsync();
        }

        // GET: api/Medicines/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Medicine>> GetMedicine(int id)
        {
            var medicine = await _context.Medicines.FindAsync(id);

            if (medicine == null)
            {
                return NotFound();
            }

            return medicine;
        }

        // PUT: api/Medicines/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutMedicine(int id, Medicine medicine)
        {
            if (id != medicine.MedicineId)
            {
                return BadRequest();
            }

            _context.Entry(medicine).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!MedicineExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Medicines
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Medicine>> PostMedicine(Medicine medicine)
        {
            _context.Medicines.Add(medicine);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetMedicine", new { id = medicine.MedicineId }, medicine);
        }

        // DELETE: api/Medicines/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteMedicine(int id)
        {
            var medicine = await _context.Medicines.FindAsync(id);
            if (medicine == null)
            {
                return NotFound();
            }

            _context.Medicines.Remove(medicine);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool MedicineExists(int id)
        {
            return _context.Medicines.Any(e => e.MedicineId == id);
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineMedDonation.Models;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class NgoesController : ControllerBase
    {
        private readonly MedDonationContext _context;

        public NgoesController(MedDonationContext context)
        {
            _context = context;
        }

        // GET: api/Ngoes
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Ngo>>> GetNgos()
        {
            return await _context.Ngos.ToListAsync();
        }

        // GET: api/Ngoes/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Ngo>> GetNgo(int id)
        {
            var ngo = await _context.Ngos.FindAsync(id);

            if (ngo == null)
            {
                return NotFound();
            }

            return ngo;
        }

        // PUT: api/Ngoes/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutNgo(int id, Ngo ngo)
        {
            if (id != ngo.NgoId)
            {
                return BadRequest();
            }

            _context.Entry(ngo).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!NgoExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Ngoes
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Ngo>> PostNgo(Ngo ngo)
        {
            _context.Ngos.Add(ngo);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetNgo", new { id = ngo.NgoId }, ngo);
        }

        // DELETE: api/Ngoes/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteNgo(int id)
        {
            var ngo = await _context.Ngos.FindAsync(id);
            if (ngo == null)
            {
                return NotFound();
            }

            _context.Ngos.Remove(ngo);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool NgoExists(int id)
        {
            return _context.Ngos.Any(e => e.NgoId == id);
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineMedDonation.Models;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class RequestsController : ControllerBase
    {
        private readonly MedDonationContext _context;

        public RequestsController(MedDonationContext context)
        {
            _context = context;
        }

        // GET: api/Requests
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Request>>> GetRequests()
        {
            return await _context.Requests.ToListAsync();
        }

        // GET: api/Requests/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Request>> GetRequest(int id)
        {
            var request = await _context.Requests.FindAsync(id);

            if (request == null)
            {
                return NotFound();
            }

            return request;
        }

        // PUT: api/Requests/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutRequest(int id, Request request)
        {
            if (id != request.RequestId)
            {
                return BadRequest();
            }

            _context.Entry(request).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!RequestExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Requests
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<Request>> PostRequest(Request request)
        {
            _context.Requests.Add(request);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetRequest", new { id = request.RequestId }, request);
        }

        // DELETE: api/Requests/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteRequest(int id)
        {
            var request = await _context.Requests.FindAsync(id);
            if (request == null)
            {
                return NotFound();
            }

            _context.Requests.Remove(request);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool RequestExists(int id)
        {
            return _context.Requests.Any(e => e.RequestId == id);
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using OnlineMedDonation.Models;

namespace OnlineMedDonation.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UsersController : ControllerBase
    {
        private readonly MedDonationContext _context;

        public UsersController(MedDonationContext context)
        {
            _context = context;
        }

        // GET: api/Users
        [HttpGet]
        public async Task<ActionResult<IEnumerable<User>>> GetUsers()
        {
            return await _context.Users.ToListAsync();
        }

        // GET: api/Users/5
        [HttpGet("{id}")]
        public async Task<ActionResult<User>> GetUser(int id)
        {
            var user = await _context.Users.FindAsync(id);

            if (user == null)
            {
                return NotFound();
            }

            return user;
        }

        // PUT: api/Users/5
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPut("{id}")]
        public async Task<IActionResult> PutUser(int id, User user)
        {
            if (id != user.UserId)
            {
                return BadRequest();
            }

            _context.Entry(user).State = EntityState.Modified;

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!UserExists(id))
                {
                    return NotFound();
                }
                else
                {
                    throw;
                }
            }

            return NoContent();
        }

        // POST: api/Users
        // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
        [HttpPost]
        public async Task<ActionResult<User>> PostUser(User user)
        {
            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            return CreatedAtAction("GetUser", new { id = user.UserId }, user);
        }

        // DELETE: api/Users/5
        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteUser(int id)
        {
            var user = await _context.Users.FindAsync(id);
            if (user == null)
            {
                return NotFound();
            }

            _context.Users.Remove(user);
            await _context.SaveChangesAsync();

            return NoContent();
        }

        private bool UserExists(int id)
        {
            return _context.Users.Any(e => e.UserId == id);
        }
    }
}




